#+title: My Doom Emacs config
#+author: mfroeh

* Helper Functions
This section defines some helper functions to be used for configuration.

NOTE: This is not needed, as doom automatically sets =evil-shift-width= to =tab-width= on a major mode change.
#+begin_src emacs-lisp
(defun set-tab-width (width)
  (setq tab-width width)
  (setq evil-shift-width width))
#+end_src

* General settings
This section contains package independant settings.
Eventhought I'm using =,= as my leader key, I will use =SPC= to refer to the leader key in the documenting text of this configuration.
Make sure to use =SPC h r r= or =M-x doom/reload= to apply changes made to any of the configuration files.
Use =K= with the cursor on top of a symbol to open up documentation on it.
If thats not enough and you want to jump directly to the source use =g d=.
Use =SPC h v= to get information on any variable.

** User information
#+begin_src emacs-lisp
(setq user-full-name "mfroeh"
      user-mail-address "mfroeh0@proton.me")
#+end_src
** File deletion
Delete files by moving them into the trash.
#+begin_src emacs-lisp
(setq-default delete-by-moving-to-trash t)
#+end_src
** Undo and auto-save
Some sensible undo and auto-save defaults.
#+begin_src emacs-lisp
(setq undo-limit 80000000   ;; Raise undo-limit to 80Mb
      evil-want-fine-undo t ;; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t   ;; Nobody likes to lose work, I certainly don't
      scroll-preserve-screen-position 'always ;; Don't have `point' jump around
      scroll-margin 2)      ;; It's nice to maintain a little margin
#+end_src

** Font
You can use =SPC h v doom-font= to find out more about how to set fonts.
=M-x describe-font= to look up the correct font name and =M-x doom/reload-font= to reload dooms font.
#+begin_src emacs-lisp
;; (setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 16))
(setq doom-font (font-spec :family "FantasqueSansMono Nerd Font Mono" :size 20)
      doom-variable-pitch-font (font-spec :family "Andika") ;; inherits the :size from doom-font
      doom-unicode-font (font-spec :family "JuliaMono")
      doom-serif-font (font-spec :family "FantasqueSansMono Nerd Font Mono" :weight 'light))

#+end_src

** Doom theme
Themes may also be loaded using =M-x load-theme=.
#+begin_src emacs-lisp
(setq doom-theme 'doom-oceanic-next)
#+end_src

** Window title
I’d like to have just the buffer name, then if applicable the project folder
#+begin_src emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src

** Keymappings
Use =command= as the =M= meta key and =option= or =alt= as the =s= super key on both linux and macos.
#+begin_src emacs-lisp
(cond (IS-LINUX
       (setq x-meta-keysym 'super
             x-super-keysym 'meta)))

(cond (IS-MAC
       (setq mac-command-key 'meta
             mac-option-key 'super)))
#+end_src

** Keybindings
Use =,= as the leader and the localleader key over =SPC=.
#+begin_src emacs-lisp
(setq doom-leader-key ","
      doom-localleader-key ",")
#+end_src

TODO: Also escape using =C-f=.
#+begin_src emacs-lisp
(define-key evil-insert-state-map (kbd "C-f") 'evil-normal-state)
;; TODO: unbind key
#+end_src

** Frame
Start emacs frames maximized.
#+begin_src emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
** Misc
Use relative line numbers.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

Stretch cursor to the glpyth width.
#+begin_src emacs-lisp
(setq-default x-stretch-cursor t)
#+end_src

Introduce =Q= as the text object of the entire buffer.
May be used when indenting (=Q >=), yanking (=y Q=), changing (=c Q=) or deleting (=d Q=).
#+begin_src emacs-lisp
(define-key evil-normal-state-map "Q" #'mark-whole-buffer)
#+end_src

Treat Emacs symbols as a word inside evil.
This has the advantage that it changes depending on the language.
E.g. =foo-bar= is a symbol (thus a word) in =lisp-mode= but two symbols (seperated by =-=) in =c++-mode=.
#+begin_src emacs-lisp
(with-eval-after-load 'evil
  (defalias #'forward-evil-word #'forward-evil-symbol)
  ;; make evil-search-word look for symbol rather than word boundaries
  (setq-default evil-symbol-word-search t))
#+end_src

Use two spaces for indention by default.
This setting is overriden for languages later on in the config.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 2
              evil-shift-width 2)
#+end_src

Pick which file or buffer to open in a new split and focus the new window.
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

Different splash screen.
#+begin_src emacs-lisp
(setq fancy-splash-image "~/.config/doom/misc/splash-images/emacs-e-orange.png")
#+end_src

Initial scratch mode.
#+begin_src emacs-lisp
(setq doom-scratch-initial-major-mode 'emacs-lisp-mode)
#+end_src

* Package settings
This section contains settings specific to the various installed packages.
To add a new package, first check if it is already in [[./init.el][init.el]].
If it is, just uncomment it. Otherwise add it to [[./packages.el][packages.el]].

** Org-mode
Set directory to store org files.
#+begin_src emacs-lisp
(setq org-directory "~/org/")
#+end_src

** Projectile
#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/dev/"))
#+end_src

** Aggresive-indent
Enforces perfect indention on the first level.
I have it globally enabled.
#+begin_src emacs-lisp
(global-aggressive-indent-mode t)
#+end_src

** Doom-modeline
Use orange text instead of red text in the modeline when the buffer is modified.
#+begin_src emacs-lisp
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
#+end_src

Display time and set time format to 24h.
#+begin_src emacs-lisp
(after! doom-modeline
  (setq display-time-string-forms
        '((propertize (concat " ⌛ " 24-hours ":" minutes))))
  (display-time-mode 1)) ; Enable time in the mode-line
#+end_src

Show battery level if possible.
#+begin_src emacs-lisp
(after! doom-modeline
  (let ((battery-str (battery)))
     (unless (or (equal "Battery status not available" battery-str)
                 (string-match-p (regexp-quote "unknown") battery-str)
                 (string-match-p (regexp-quote "N/A") battery-str))
      (display-battery-mode 1))))
#+end_src

#+begin_src emacs-lisp
(setq doom-modeline-major-mode-icon t
      doom-modeline-major-mode-color-icon t
      doom-modeline-buffer-state-icon t)
#+end_src
** Which-key
Make which-key window appear faster.
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5 ;; Default is 1.0
      which-key-idle-secondary-delay 0.05) ;; Default is nil
#+end_src

Replace =evil-= with an icion in the which-key window, such that it is more concise.
#+begin_src emacs-lisp
(setq which-key-allow-multiple-replacements t)

(after! which-key
  (pushnew! which-key-replacement-alist
            '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
            '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))))
#+end_src

** Format
Disable formatting with =textDocument/formatting= by default.
Instead define formatting behaviour through hooks for specific languages for more control.
#+begin_src emacs-lisp
(setq +format-with-lsp nil)
#+end_src

** Vterm
I want to use zsh as default shell.
#+begin_src emacs-lisp
(setq vterm-shell "zsh")
#+end_src

** YASnippet
Enable nested snippets.
#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src

** LSP
LSP mode provides a set of configurable UI stuff, Doom Emacs disables some of the UI components.
However, I like to enable some less intrusive, more useful UI stuff.
Enable breadcrumbs for headerline and the sideline for diagnostics and code actions.
#+begin_src emacs-lisp
(after! lsp-ui
  (setq lsp-headerline-breadcrumb-enable t
        lsp-headerline-breadcrumb-enable-diagnostics nil
        lsp-headerline-breadcrumb-icons-enable t
        lsp-headerline-breadcrumb-segements '(project file symbols))
  (setq lsp-ui-sideline-enable t
        lsp-ui-sideline-show-code-actions t
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-show-symbol t
        lsp-ui-sideline-show-hover nil))
#+end_src

** Treemacs
Use icons inside the treemacs project drawer and make items expand with one click instead of two clicks.
#+begin_src emacs-lisp
(after! treemacs
  (setq doom-themes-treemacs-theme "doom-colors"
        treemacs-is-never-other-window t)
  (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action))
#+end_src

* Language settings
Individual settings for specific language modes.

** Emacs lisp
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (setq tab-width 2)))
#+end_src

** Rust
Format rust buffers on save.
#+begin_src emacs-lisp
(add-hook 'rust-mode-hook
          (lambda ()
            (setq tab-width 4)
            (add-hook 'before-save-hook 'format-all-buffer)))
#+end_src

** Python
Format python buffers on save and run =py-isort-buffer= before.
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
          (lambda ()
            (setq tab-width 4)
            (add-hook 'before-save-hook 'py-isort-buffer)
            (add-hook 'before-save-hook 'format-all-buffer)))
#+end_src
Use =debugpy= for debugging.
#+begin_src emacs-lisp
(after! dap-mode
  (setq dap-python-debugger 'debugpy))
#+end_src
** C/C++
Enable the google c++ coding style.
#+begin_src emacs-lisp
(add-hook 'c++-mode-hook
          (lambda ()
            (setq tab-width 4)
            (google-set-c-style)
            (google-make-newline-indent)))
#+end_src

Use clangd as lsp server.
#+begin_src emacs-lisp
(setq lsp-clients-clangd-args '("-j=4"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"
                                "--header-insertion-decorators=0"))
(after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+end_src

** LaTeX
#+begin_src emacs-lisp
(add-hook 'latex-mode-hook
          (lambda ()
            (setq tab-width 2)))
#+end_src
